// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using prj_core_withdbfirstapproch.MyModels;

#nullable disable

namespace prj_core_withdbfirstapproch.Migrations
{
    [DbContext(typeof(Alokcontext))]
    [Migration("20240424133338_second")]
    partial class second
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("prj_core_withdbfirstapproch.MyModels.Customer", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("first_name");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("Mobile")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("mobile");

                    b.HasKey("id");

                    b.ToTable("customer");
                });

            modelBuilder.Entity("prj_core_withdbfirstapproch.MyModels.CustomerAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Area")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("area");

                    b.Property<string>("City")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("country");

                    b.Property<int?>("CustId")
                        .HasColumnType("int")
                        .HasColumnName("cust_id");

                    b.Property<string>("HouseNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("house_no");

                    b.Property<string>("Pincode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("pincode");

                    b.Property<string>("StreetNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("street_no");

                    b.HasKey("Id");

                    b.HasIndex("CustId");

                    b.ToTable("customer_address");
                });

            modelBuilder.Entity("prj_core_withdbfirstapproch.MyModels.CustomerBank", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccountNo")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("account_no");

                    b.Property<string>("BankName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("bank_name");

                    b.Property<int?>("CustId")
                        .HasColumnType("int")
                        .HasColumnName("cust_id");

                    b.Property<string>("IfscCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ifsc_code");

                    b.Property<string>("Imps")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("imps");

                    b.Property<string>("Upi")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("upi");

                    b.HasKey("Id");

                    b.HasIndex("CustId");

                    b.ToTable("customer_bank");
                });

            modelBuilder.Entity("prj_core_withdbfirstapproch.MyModels.Difficulty", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Difficulties");
                });

            modelBuilder.Entity("prj_core_withdbfirstapproch.MyModels.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FileDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileExtension")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FileSizeInBytes")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("prj_core_withdbfirstapproch.MyModels.Region", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RegionImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Regions");
                });

            modelBuilder.Entity("prj_core_withdbfirstapproch.MyModels.Walk", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("DifficultyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("LengthInKm")
                        .HasColumnType("float");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RegionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WalksImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "DifficultyId" }, "IX_Walks_DifficultyId");

                    b.HasIndex(new[] { "RegionId" }, "IX_Walks_RegionId");

                    b.ToTable("Walks");
                });

            modelBuilder.Entity("prj_core_withdbfirstapproch.MyModels.CustomerAddress", b =>
                {
                    b.HasOne("prj_core_withdbfirstapproch.MyModels.Customer", "Cust")
                        .WithMany("CustomerAddresses")
                        .HasForeignKey("CustId")
                        .HasConstraintName("FK_customer_address_customer");

                    b.Navigation("Cust");
                });

            modelBuilder.Entity("prj_core_withdbfirstapproch.MyModels.CustomerBank", b =>
                {
                    b.HasOne("prj_core_withdbfirstapproch.MyModels.Customer", "Cust")
                        .WithMany("CustomerBanks")
                        .HasForeignKey("CustId")
                        .HasConstraintName("FK_customer_bank_customer");

                    b.Navigation("Cust");
                });

            modelBuilder.Entity("prj_core_withdbfirstapproch.MyModels.Walk", b =>
                {
                    b.HasOne("prj_core_withdbfirstapproch.MyModels.Difficulty", "Difficulty")
                        .WithMany("Walks")
                        .HasForeignKey("DifficultyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("prj_core_withdbfirstapproch.MyModels.Region", "Region")
                        .WithMany("Walks")
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Difficulty");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("prj_core_withdbfirstapproch.MyModels.Customer", b =>
                {
                    b.Navigation("CustomerAddresses");

                    b.Navigation("CustomerBanks");
                });

            modelBuilder.Entity("prj_core_withdbfirstapproch.MyModels.Difficulty", b =>
                {
                    b.Navigation("Walks");
                });

            modelBuilder.Entity("prj_core_withdbfirstapproch.MyModels.Region", b =>
                {
                    b.Navigation("Walks");
                });
#pragma warning restore 612, 618
        }
    }
}
